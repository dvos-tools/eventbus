name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  manual-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Use semantic versioning (e.g., 1.0.0)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
    
    - name: Check if version exists
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if git tag -l | grep -q "v$VERSION"; then
          echo "❌ Version v$VERSION already exists"
          exit 1
        fi
        echo "✅ Version v$VERSION is available"
    
    - name: Update package.json version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Update package.json with release version
        if [[ "$OSTYPE" == "darwin"* ]]; then
          sed -i '' "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" package.json
        else
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION\"/" package.json
        fi
        
        echo "✅ Updated package.json to version $VERSION"
    
    - name: Generate release notes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create release notes
        cat > release_notes.md << EOF
# Release v$VERSION

**Release Date:** $DATE

## What's New

EOF
        
        # Add custom release notes if provided
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "${{ github.event.inputs.release_notes }}" >> release_notes.md
        else
          echo "Official release of Unity EventBus package version $VERSION" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "Add to your \`manifest.json\`:" >> release_notes.md
        echo "\`\`\`json" >> release_notes.md
        echo "{" >> release_notes.md
        echo "  \"dependencies\": {" >> release_notes.md
        echo "    \"com.dvos-tools.bus\": \"https://github.com/dvos-tools/eventbus.git?path=/&version=$VERSION\"" >> release_notes.md
        echo "  }" >> release_notes.md
        echo "}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create Git tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git add package.json
        git commit -m "chore(release): $VERSION"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin main
        git push origin "v$VERSION"
        echo "✅ Created and pushed tag v$VERSION"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: Success message
      run: |
        echo "🎉 Successfully created release v${{ github.event.inputs.version }}"
        echo "📦 Package version: ${{ github.event.inputs.version }}"
        echo "🏷️  Git tag: v${{ github.event.inputs.version }}"
        echo "📋 GitHub release created"